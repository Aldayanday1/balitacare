workflows:
  ios-release-altstore:
    name: iOS Release (AltStore Ready)
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
      vars:
        BUNDLE_ID: "com.example.aplikasibalita"
    scripts:
      - name: Clean project
        script: |
          flutter clean
          flutter pub get

      - name: Generate app icons
        script: |
          dart run flutter_launcher_icons

      - name: Build iOS and create IPA (AltStore-ready)
        script: |
          set -euo pipefail
          echo "Attempt: flutter build ios --release --no-codesign"
          ARTIFACTS_DIR="$CM_BUILD_DIR/artifacts"
          mkdir -p "$ARTIFACTS_DIR"

          if flutter build ios --release --no-codesign; then
            echo "flutter build succeeded"
          else
            echo "flutter build failed â€” attempting xcodebuild (no codesign) fallback"
            # Try xcodebuild archive with signing disabled (fallback)
            cd ios
            # Clean previous build products
            xcodebuild clean -workspace Runner.xcworkspace -scheme Runner -configuration Release || true
            # Archive without allowing code signing
            xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -sdk iphoneos -archivePath ../build/Runner.xcarchive CODE_SIGNING_ALLOWED=NO || {
              echo "xcodebuild archive failed"; exit 5;
            }
            cd ..
          fi

          # Find the built Runner.app (search typical locations)
          APP_PATH=$(find build/ios -type d -name "Runner.app" | head -n 1 || true)
          echo "Found app path: $APP_PATH"

          if [ -z "$APP_PATH" ]; then
            # Try inside the archive products
            ARCHIVE_APP="build/Runner.xcarchive/Products/Applications/Runner.app"
            if [ -d "$ARCHIVE_APP" ]; then
              APP_PATH="$ARCHIVE_APP"
            fi
          fi

          if [ -z "$APP_PATH" ]; then
            echo "ERROR: Runner.app not found. Listing build/ios for debugging:" >&2
            find build/ios -maxdepth 5 -type d -print || true
            exit 2
          fi

          # Prepare Payload and copy the .app
          PAYLOAD_DIR="$(pwd)/Payload"
          rm -rf "$PAYLOAD_DIR"
          mkdir -p "$PAYLOAD_DIR"
          cp -R "$APP_PATH" "$PAYLOAD_DIR/"

          # Basic validation: Info.plist must exist
          if [ ! -f "$PAYLOAD_DIR/Runner.app/Info.plist" ]; then
            echo "ERROR: Info.plist missing inside Runner.app" >&2
            ls -la "$PAYLOAD_DIR/Runner.app" || true
            exit 3
          fi

          IPA_NAME="Balitacare.ipa"
          IPA_PATH="$ARTIFACTS_DIR/$IPA_NAME"

          # Create IPA (zip the Payload directory). Use -q to suppress massive output but keep error code.
          (cd "$PAYLOAD_DIR" && zip -r "$IPA_PATH" Payload) || { echo "zip failed"; exit 4; }

          echo "IPA produced:" && ls -lh "$IPA_PATH" || true

          # Clean
          rm -rf "$PAYLOAD_DIR"

    artifacts:
      - $CM_BUILD_DIR/artifacts/*.ipa

    publishing:
      email:
        recipients:
          - onlymarfa69@gmail.com
        notify:
          success: true
          failure: true
